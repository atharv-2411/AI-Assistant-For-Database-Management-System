import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const response = await openai.chat.completions.create({
  model: "gpt-4o-mini",
  messages: [
    {
      "role": "system",
      "content": [
        {
          "text": "You are an expert in database schema visualization using the react_flow library. Your task is to convert a PostgreSQL database schema into a JSON schema compatible with react_flow to facilitate the creation of visual diagrams.\n\nInstructions:\n\n\tInput:\n    \tYou will receive a PostgreSQL database schema consisting of CREATE TABLE SQL statements. The schema includes table definitions, column names, data types, and constraints (e.g., PRIMARY KEY, FOREIGN KEY).\n\n\tTask:\n    \tParse the provided SQL schema and generate a JSON object containing two arrays: nodes and edges.\n    \tThe JSON should adhere to the react_flow library's requirements for creating visual diagrams.\n\n\tRequirements:\n\n    \tNodes Array:\n        \tEach table in the database schema should be represented as a node.\n        \tProperties for Each Node:\n            \tid: A unique identifier for the node, preferably based on the table name (e.g., \"authors\").\n            \tposition: An object specifying the node's position in the diagram. For simplicity, you can use incremental positioning (e.g., { x: 0, y: 0 }, { x: 300, y: 0 }, etc.) or implement a basic layout logic.\n            \ttype: Set to \"databaseSchema\".\n            \tdata: An object containing:\n                \tlabel: The table name (e.g., \"Authors\").\n                \tschema: An array of objects, each representing a column with:\n                    \ttitle: Column name (e.g., \"author_id\").\n                        is_pk: true or false (check from the input if the given data is a primary key or not)\n                        is_null: true or false (check from the input if the given data is null or not)\n                        if_unique: true or false (check from the input if the given data is unique or not)\n                    \ttype: Data type (e.g., \"int\", \"varchar\", \"date\").\n\n    \tEdges Array:\n        \tEach foreign key relationship should be represented as an edge.\n        \tProperties for Each Edge:\n            \tid: A unique identifier combining the source and target tables and columns (e.g., \"books-authors\").\n            \tsource: The id of the source node/table (e.g., \"books\").\n            \ttarget: The id of the target node/table (e.g., \"authors\").\n            \tsourceHandle: The foreign key column in the source table (e.g., \"author_id\").\n            \ttargetHandle: The primary key column in the target table (e.g., \"author_id\").\n                relationship: the relationship between the target and source, for instance 1-M, M-1, M-M. \n\n\n\tConstraints:\n    \tSyntax and Standards:\n        \tEnsure the JSON is syntactically correct and follows react_flow's expected structure.\n    \tNaming Conventions:\n        \tUse lowercase and snake_case for all ids and property names.\n    \tRelationships:\n        \tAccurately identify and represent all foreign key relationships as edges.\n    \tPositioning:\n        \tAim for a layout that minimizes edge crossings and maintains readability.\n    \tUniqueness:\n        \tEnsure that all ids for nodes and edges are unique to prevent conflicts in the visualization.\n    \tNo Additional Explanations:\n        \tDo not include any text outside of the JSON structure.\n\n\tExample Format:\n\n{\n  \"nodes\": [\n\t{\n  \t\"id\": \"authors\",\n  \t\"position\": { \"x\": 0, \"y\": 0 },\n  \t\"type\": \"databaseSchema\",\n  \t\"data\": {\n    \t\"label\": \"Authors\",\n    \t\"schema\": [\n      \t{ \"title\": \"author_id\", \"type\": \"int\" },\n      \t{ \"title\": \"first_name\", \"type\": \"varchar\" },\n      \t{ \"title\": \"last_name\", \"type\": \"varchar\" },\n      \t{ \"title\": \"birth_year\", \"type\": \"int\" }\n    \t]\n  \t}\n\t},\n\t{\n  \t\"id\": \"books\",\n  \t\"position\": { \"x\": 300, \"y\": 0 },\n  \t\"type\": \"databaseSchema\",\n  \t\"data\": {\n    \t\"label\": \"Books\",\n    \t\"schema\": [\n      \t{ \"title\": \"book_id\", \"type\": \"int\" },\n      \t{ \"title\": \"title\", \"type\": \"varchar\" },\n      \t{ \"title\": \"genre\", \"type\": \"varchar\" },\n      \t{ \"title\": \"publish_year\", \"type\": \"int\" },\n      \t{ \"title\": \"author_id\", \"type\": \"int\" }\n    \t]\n  \t}\n\t},\n\t{\n  \t\"id\": \"borrowers\",\n  \t\"position\": { \"x\": 300, \"y\": 200 },\n  \t\"type\": \"databaseSchema\",\n  \t\"data\": {\n    \t\"label\": \"Borrowers\",\n    \t\"schema\": [\n      \t{ \"title\": \"borrower_id\", \"type\": \"int\" },\n      \t{ \"title\": \"first_name\", \"type\": \"varchar\" },\n      \t{ \"title\": \"last_name\", \"type\": \"varchar\" },\n      \t{ \"title\": \"email\", \"type\": \"varchar\" }\n    \t]\n  \t}\n\t},\n\t{\n  \t\"id\": \"borrowings\",\n  \t\"position\": { \"x\": 600, \"y\": 200 },\n  \t\"type\": \"databaseSchema\",\n  \t\"data\": {\n    \t\"label\": \"Borrowings\",\n    \t\"schema\": [\n      \t{ \"title\": \"borrow_id\", \"type\": \"int\" },\n      \t{ \"title\": \"book_id\", \"type\": \"int\" },\n      \t{ \"title\": \"borrower_id\", \"type\": \"int\" },\n      \t{ \"title\": \"borrow_date\", \"type\": \"date\" },\n      \t{ \"title\": \"return_date\", \"type\": \"date\" }\n    \t]\n  \t}\n\t}\n  ],\n  \"edges\": [\n\t{\n  \t\"id\": \"books-authors\",\n  \t\"source\": \"books\",\n  \t\"target\": \"authors\",\n  \t\"sourceHandle\": \"author_id\",\n  \t\"targetHandle\": \"author_id\",\n        relationship: \"1-M\"\n\t},\n\t{\n  \t\"id\": \"borrowings-books\",\n  \t\"source\": \"borrowings\",\n  \t\"target\": \"books\",\n  \t\"sourceHandle\": \"book_id\",\n  \t\"targetHandle\": \"book_id\",\n      relationship: \"1-M\"\n\t},\n\t{\n  \t\"id\": \"borrowings-borrowers\",\n  \t\"source\": \"borrowings\",\n  \t\"target\": \"borrowers\",\n  \t\"sourceHandle\": \"borrower_id\",\n  \t\"targetHandle\": \"borrower_id\",\n      relationship: \"1-M\"\n\t}\n  ]\n}\n\nNow, based on the provided PostgreSQL database schema, generate the corresponding JSON schema for react_flow.\n",
          "type": "text"
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "text": "create me a react flow chart for:\n\n-- 1. Coffee Types Table\nCREATE TABLE coffee_types (\n    coffee_type_id SERIAL PRIMARY KEY, -- Unique identifier for each coffee type\n    name VARCHAR(100) NOT NULL, -- Name of the coffee type\n    description TEXT, -- Description of the coffee type\n    price NUMERIC(5,2) NOT NULL -- Price of the coffee type\n);\n\n-- 2. Employees Table\nCREATE TABLE employees (\n    employee_id SERIAL PRIMARY KEY, -- Unique identifier for each employee\n    first_name VARCHAR(100) NOT NULL, -- Employee's first name\n    last_name VARCHAR(100) NOT NULL, -- Employee's last name\n    email VARCHAR(255) NOT NULL UNIQUE, -- Employee's email (must be unique)\n    hire_date DATE NOT NULL -- Date the employee was hired\n);\n\n-- 3. Orders Table\nCREATE TABLE orders (\n    order_id SERIAL PRIMARY KEY, -- Unique identifier for each order\n    employee_id INT, -- Employee who took the order\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date and time of the order\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id) -- Foreign key constraint\n);\n\n-- 4. Order Items Table (Many-to-many relationship between Orders and Coffee Types)\nCREATE TABLE order_items (\n    order_item_id SERIAL PRIMARY KEY, -- Unique identifier for each order item\n    order_id INT, -- Related order\n    coffee_type_id INT, -- Related coffee type\n    quantity INT NOT NULL DEFAULT 1, -- Quantity of the coffee type ordered\n    FOREIGN KEY (order_id) REFERENCES orders(order_id), -- Foreign key constraint\n    FOREIGN KEY (coffee_type_id) REFERENCES coffee_types(coffee_type_id) -- Foreign key constraint\n);",
          "type": "text"
        }
      ]
    },
      ]
    }
  ],
  temperature: 1,
  max_tokens: 5000,
  top_p: 1,
  frequency_penalty: 0,
  presence_penalty: 0,
  response_format: {
    "type": "json_object"
  },
});
